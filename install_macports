#!/bin/sh

# install_macports — Install MacPorts

# Install MacPorts (https://github.com/melusina-org/gha-install-macports)
# This file is part of Install MacPorts.
#
# Copyright © 2022 Michaël Le Barbier
# All rights reserved.

# This file must be used under the terms of the MIT License.
# This source file is licensed as described in the file LICENSE, which
# you should have received as part of this distribution. The terms
# are also available at https://opensource.org/licenses/MIT

github_owner='macports'
github_repo='macports-base'

parameterfile='.github/parameters/gha-install-macports.yaml'
prefix='/opt/local'
version='2.8.0'

wlog()
{
    {
	printf '%s: ' "$1"
	shift
	printf "$@"
	printf '\n'
    } 1>&2
}

failwith()
{
    local OPTIND OPTION OPTARG status

    status=1
    OPTIND=1

    while getopts 'x:' OPTION; do
        case ${OPTION} in
            x)	status="${OPTARG}";;
            *)	1>&2 printf 'failwith: %s: Unsupported option.\n' "${OPTION}";;
        esac
    done

    shift $(expr ${OPTIND} - 1)

    case "$1" in
	[0-9][0-9][0-9]|[0-9][0-9]|[0-9])
	    status="$1"
	    shift
	    ;;
	*)
	    :
    esac

    wlog 'Error' "$@"
    exit "${status}"
}

with_group_presentation()
(
    if [ "${GITHUB_ACTIONS}" = 'true' ]; then    
	trap "printf '::endgroup::\n'" INT TERM EXIT 
	printf '::group::%s\n' "$1"
    fi
    shift
    "$@"
)

github_api()
(
    url()
    {
	printf 'https://api.github.com'
	printf '/%s' "$@"
    }

    exec curl --silent -H "Accept: application/vnd.github+json" $(url "$@")
)

extract_releases()
{
    github_api repos "${github_owner}" "${github_repo}" releases
}

transform_releases()
{
    python3 -c'
import json
import sys

releases = json.loads(sys.stdin.read())

for release in releases:
  if release["draft"]: continue
  for asset in release["assets"]:
    print(f"""{release["tag_name"]}|{release["name"]}|{asset["browser_download_url"]}""")
'
}

find_package()
{
    python3 -c'
import json
import re
import sys

macos = sys.argv[1]
tag_name = sys.argv[2]

package_pattern = macos + "[.]pkg$"

releases = json.loads(sys.stdin.read())

package = ":not-found"

for release in releases:
  if release["draft"]: continue
  if release["tag_name"] == tag_name:
    for asset in release["assets"]:
      if re.search(package_pattern, asset["browser_download_url"]):
        package = asset["browser_download_url"]

print(package)
' "$@"
}

find_macos()
{
    python3 -c'
import json
import re
import sys
macos_names = set()
releases = json.loads(sys.stdin.read())

def extract_macos_name(download_url):
  macos_name = download_url
  macos_name = re.sub(".pkg$", "", macos_name)
  macos_name = re.sub(".*MacPorts-[0-9._]*-", "", macos_name)
  macos_name = re.sub("beta[0-9._]*-", "", macos_name)
  macos_name = re.sub("rc[0-9._]*-", "", macos_name)
  return macos_name

for release in releases:
  if release["draft"]: continue
  for asset in release["assets"]:
    if re.search(".pkg$", asset["browser_download_url"]):
       macos_names.add(extract_macos_name(asset["browser_download_url"]))

def fsort(l):
  l.sort
  return l

for macos_name in fsort(list(macos_names)):
  print(macos_name)
'
}

fetch_releases()
{
    extract_releases | transform_releases
}

fetch_macos_db()
{
    extract_releases | find_macos | sort 
}

fetch_package()
{
    extract_releases | find_package "$@"    
}

known_macos_db()
{
    cat <<'EOF'
10.10-Yosemite
10.11-ElCapitan
10.12-Sierra
10.13-HighSierra
10.14-Mojave
10.15-Catalina
10.6-SnowLeopard
10.7-Lion
10.8-MountainLion
10.9-Mavericks
11-BigSur
12-Monterey
13-Ventura
EOF
}

make_package()
{
    local macos version
    macos="$1"
    version="$2"
    known_macos_db | awk -F'-' "-vmacos=${macos}" "-vversion=${version}" '
$2 == macos {
  printf("https://github.com/macports/macports-base/releases/download/v%s/MacPorts-%s-%s-%s.pkg", version, version, $1, $2)
}
'
}

probe_macos()
{
    {
	known_macos_db
	printf 'EOF\n'
	system_profiler SPSoftwareDataType
    } | awk -F '-' '
BEGIN {
  mode = "readdb"
}

$0 == "EOF" {
  mode = "readprofile"
}

mode == "readdb" {
  macos[$1] = $2 
}

/System Version/ {
  if(match($0, "10[.][0-9]+")) {
    version = substr($0, RSTART, RLENGTH)
  }
  else if(match($0, "[0-9]+[.][0-9]+")) {
    version = substr($0, RSTART, RLENGTH)
    gsub("[.][0-9]+*", "", version)
  }

}

END {
  if(version in macos) {
    print(macos[version])
  } else {
    print(":not-found")
  }
}

'
}

usage()
{
    if [ "$#" -gt 0 ]; then
	wlog 'Failure' "$@"
    fi
    cat 1>&2 <<'EOF'
Usage: install_macports [VERSION-OR-PATHNAME]
 Install MacPorts
EOF
    exit 64
}

ensure_macos()
{
    case $(uname) in
	Darwin)
	    return 0
	    ;;
    esac

    failwith '\047%s\047 is not a MacOS platform.\n' $(uname) 
    exit 1
}

configuration_summary()
{
    cat <<SUMMARY
Package: ${package}
Prefix: ${prefix}
Version: ${version}
Variants: $(variants_document)
Ports: $(ports_document)
Sources: $(sources_document)
Path: ${PATH}
Parameter File: ${parameterfile}
SUMMARY
}

write_configuration()
{
    local pathname
    pathname="$2"

    sudo install -d -o root -g wheel -m 755 $(dirname "${pathname}")
    sudo install -o root -g wheel -m 644 /dev/null "${pathname}"

    if [ -f "$1" -a -r "$1" ]; then
	sudo cp -f "$1" "${pathname}"
    elif [ "$1" = ':no-value' ]; then
	sudo sh -c "cat > \"${pathname}\"" <<YAML
version: '${version}'
prefix: '${prefix}'
YAML
    else
	failwith '%s: Not a regular and readable file.' "$1"
    fi    

    with_group_presentation\
	'Configuration Summary'\
	configuration_summary
}

fetch_and_install_package()
{
    local pathname package
    package="$1"
    pathname="./${package##*/}"
    
    curl -L -o  "${pathname}" "${package}"
    sudo installer -pkg "${pathname}" -target /
}

variants_document()
{
    if [ "$#" -eq 0 ]; then
	set -- "${prefix}/etc/gha-install-macports.yaml"
    fi

    printf '# MacPorts system-wide global variants configuration file.\n'
    yq '
.variants // {}
| ( .select = .select // [] )
| ( .select = select(.select | type == "!!seq").select // [.select] )
| ( .deselect = .deselect // [] )
| ( .deselect = select(.deselect | type == "!!seq").deselect // [.deselect] ) 
| (
    (.select | .[] | "+" + . ),
    (.deselect | .[] | "-" + . )
  )
' < "$1"
}

ports_document()
{
    if [ "$#" -eq 0 ]; then
	set -- "${prefix}/etc/gha-install-macports.yaml"
    fi

    yq '
.ports // {} | .[] 
| ( .select = .select // [] )
| ( .select = select(.select | type == "!!seq").select // [.select] )
| ( .select = (.select | map("+" + . ) | join(" ")))
| ( .deselect = .deselect // [] )
| ( .deselect = select(.deselect | type == "!!seq").deselect // [.deselect] ) 
| ( .deselect = (.deselect | map("-" + . ) | join(" ")))
| ( [ .name, .select, .deselect ] | join (" "))
' < "$1"
}

sources_document()
{
    if [ "$#" -eq 0 ]; then
	set -- "${prefix}/etc/gha-install-macports.yaml"
    fi

    yq '
.sources // ["rsync://rsync.macports.org/macports/release/tarballs/ports.tar"]
| ( .[0] = .[0] + " [default]")
| .[]
' < "$1"
}

write_variants()
{
    sudo install -o root -g wheel -m 644 /dev/null "${prefix}/etc/macports/variants.conf"
    variants_document "$1" | sudo sh -c "cat > \"${prefix}/etc/macports/variants.conf\"" 
}

write_sources()
{
    sudo install -o root -g wheel -m 644 /dev/null "${prefix}/etc/macports/sources.conf"
    sources_document "$1" | sudo sh -c "cat > \"${prefix}/etc/macports/sources.conf\"" 
}

setup_path()
{
    sudo install -o root -g wheel -m 644 /dev/null /etc/paths.d/900-macports
    sudo sh -c "printf '%s/bin\n/' ${prefix} > /etc/paths.d/900-macports" 
    sudo sh -c "printf '%s/sbin\n/' ${prefix} > /etc/paths.d/900-macports"
    PATH="${prefix}/bin:${prefix}/sbin:${PATH}"
}

install_ports()
{
    ports_document "$1" | sudo xargs -J '%' port install '%'
}

experimental()
{
    :
}

main()
{
    local OPTIND OPTION OPTARG
    local macos package action

    ensure_macos
    action='install'
    macos=$(probe_macos)
    OPTIND=1
    while getopts 'x' OPTION; do
        case ${OPTION} in
            x)
		action='experimental'
		;;
            *)
		usage '\047%s\047 Unsupported option.' "${OPTION}"
		;;
        esac
    done

    shift $(expr ${OPTIND} - 1)

    case "$#" in
	0)
	    :
	    ;;
	1)
	    if [ -f "$1" -a -r "$1" ]; then
		parameterfile="$1"
	    elif [ "$1" = ':no-value' -a -f "${parameterfile}" -a -r "${parameterfile}" ]; then
		wlog 'Info' 'Use parameter file \047%s\047.' "${parameterfile}"
	    else
		parameterfile=':no-value'
	    fi
	    ;;
	*)
	    usage 'Too many arguments.'
	    ;;
    esac

    if [ -f "${parameterfile}" -a -r "${parameterfile}" ]; then
	version=$(yq ".version // \"${version}\"" < "${parameterfile}")
	prefix=$(yq ".prefix // \"${prefix}\"" < "${parameterfile}")
    fi

    package=$(make_package "${macos}" "${version}")

    if [ "${action}" = 'experimental' ]; then
	experimental "$@"
	exit 0
    fi

    setup_path
    fetch_and_install_package "${package}"
    write_configuration "$1" "${prefix}/etc/gha-install-macports.yaml"
    write_variants "${prefix}/etc/gha-install-macports.yaml"
    write_sources "${prefix}/etc/gha-install-macports.yaml"
    install_ports "${prefix}/etc/gha-install-macports.yaml"

    if [ "${GITHUB_ACTIONS}" = 'true' ]; then    
        printf '%s/bin\n' "${prefix}" >> "${GITHUB_PATH}"
        printf '%s/sbin\n' "${prefix}" >> "${GITHUB_PATH}"
        printf 'package=%s\n' "${package}" >> "${GITHUB_OUTPUT}"
	printf 'prefix=%s\n' "${prefix}" >> "${GITHUB_OUTPUT}"
        printf 'version=%s\n' "${version}" >> "${GITHUB_OUTPUT}"
    fi
}

main "$@"

# End of file `install_macports'
